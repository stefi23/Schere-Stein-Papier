{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChoice","event","preventDefault","player","target","value","computer","getComputerMove","winner","getWinner","setState","getScore","index","Math","floor","random","playGame","playerScore","state","computerScore","tie","element","className","this","onClick","name","id","align","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAwKeA,G,wDApKb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAYRC,aAAe,SAACC,GACdA,EAAMC,iBACN,IAAIC,EAASF,EAAMG,OAAOC,MACtBC,EAAW,EAAKC,kBAChBC,EAAS,EAAKC,UAAUN,EAAQG,GACpC,EAAKI,SAAS,CACZP,SACAG,WACAE,WAEF,EAAKG,SAASH,IAvBG,EA0BnBD,gBAAkB,WAMhB,IAAIK,EAFKC,KAAKC,MAAM,EAAAD,KAAKE,UAFb,EAKZ,OAAc,IAAVH,EAAoB,QACL,IAAVA,EAAoB,WACjB,QAnCK,EAsCnBH,UAAY,SAACN,EAAQG,GACnB,OAAIH,IAAWG,EACN,MACa,SAAXH,EACQ,aAAbG,EACK,SAEA,WAEW,aAAXH,EACQ,UAAbG,EACK,SAEA,WAEW,UAAXH,EACQ,SAAbG,EACK,SAEA,gBAJJ,GArDU,EA8DnBU,SAAW,WACT,EAAKN,SAAS,CACZF,OAAQ,aAhEO,EAoEnBG,SAAW,SAACH,GACK,WAAXA,EACF,EAAKE,SAAS,CACZO,YAAa,EAAKC,MAAMD,YAAc,IAEpB,aAAXT,EACT,EAAKE,SAAS,CACZS,cAAe,EAAKD,MAAMC,cAAgB,IAG5C,EAAKT,SAAS,CACZU,IAAK,EAAKF,MAAME,IAAM,KA7E1B,EAAKF,MAAQ,CACXG,QAAS,CAAC,QAAS,WAAY,QAC/Bf,SAAU,GACVH,OAAQ,GACRK,OAAQ,UACRW,cAAe,EACfF,YAAa,EACbG,IAAK,GATU,E,qDAqFjB,OACE,yBAAKE,UAAU,OACb,4BAAQA,UAAU,cAChB,sDACA,yBAAKA,UAAU,aACb,oFAEuB,YAAtBC,KAAKL,MAAMV,OACV,yBAAKc,UAAU,OACb,yBAAKA,UAAU,UACb,4BACEE,QAASD,KAAKvB,aACdyB,KAAK,OACLpB,MAAO,QACPiB,UAAU,OAJZ,SAQA,4BACEE,QAASD,KAAKvB,aACdyB,KAAK,OACLpB,MAAO,OACPiB,UAAU,OAJZ,QAQA,4BACEE,QAASD,KAAKvB,aACdyB,KAAK,OACLpB,MAAO,WACPiB,UAAU,OAJZ,cAWJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qBACb,2BAAIC,KAAKL,MAAMf,SAEjB,yBAAKmB,UAAU,qBACb,2BAAIC,KAAKL,MAAMZ,WAEjB,yBAAKgB,UAAU,sBACb,2BAAIC,KAAKL,MAAMV,OAAf,YAKR,4BAAQc,UAAU,mBAAmBE,QAASD,KAAKP,UAAnD,eAGA,yBAAKM,UAAU,OACb,yBAAKA,UAAU,UAAf,QAEE,2BAAOI,GAAG,aAAaC,MAAM,UAC3B,4BACE,wCACA,wBAAIC,MAAM,MAAV,UACA,0CACA,wBAAIA,MAAM,MAAV,UACA,sCAEF,4BACE,4BAAKL,KAAKL,MAAMD,aAChB,sCACA,4BAAKM,KAAKL,MAAMC,eAChB,sCACA,4BAAKI,KAAKL,MAAME,e,GA3JhBS,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.868e7565.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      element: [\"paper\", \"scissors\", \"rock\"],\n      computer: \"\",\n      player: \"\",\n      winner: \"unknown\",\n      computerScore: 0,\n      playerScore: 0,\n      tie: 0\n    };\n  }\n\n  handleChoice = (event) => {\n    event.preventDefault();\n    let player = event.target.value;\n    let computer = this.getComputerMove();\n    let winner = this.getWinner(player, computer);\n    this.setState({\n      player,\n      computer,\n      winner\n    });\n    this.getScore(winner);\n  };\n\n  getComputerMove = () => {\n    function getRandomInt() {\n      let min = 0;\n      let max = 3;\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n    let index = getRandomInt();\n    if (index === 0) return \"paper\";\n    else if (index === 1) return \"scissors\";\n    else return \"rock\";\n  };\n\n  getWinner = (player, computer) => {\n    if (player === computer) {\n      return \"tie\";\n    } else if (player === \"rock\") {\n      if (computer === \"scissors\") {\n        return \"player\";\n      } else {\n        return \"computer\";\n      }\n    } else if (player === \"scissors\") {\n      if (computer === \"paper\") {\n        return \"player\";\n      } else {\n        return \"computer\";\n      }\n    } else if (player === \"paper\") {\n      if (computer === \"rock\") {\n        return \"player\";\n      } else {\n        return \"computer\";\n      }\n    }\n  };\n\n  playGame = () => {\n    this.setState({\n      winner: \"unknown\"\n    });\n  };\n\n  getScore = (winner) => {\n    if (winner === \"player\") {\n      this.setState({\n        playerScore: this.state.playerScore + 1\n      });\n    } else if (winner === \"computer\") {\n      this.setState({\n        computerScore: this.state.computerScore + 1\n      });\n    } else {\n      this.setState({\n        tie: this.state.tie + 1\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Rock, Paper, Scissors!</h1>\n          <div className=\"container\">\n            <p>Play against the computer! Press any button to start.</p>\n\n            {this.state.winner === \"unknown\" ? (\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"paper\"}\n                    className=\"m-2\"\n                  >\n                    Paper\n                  </button>\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"rock\"}\n                    className=\"m-2\"\n                  >\n                    Rock\n                  </button>\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"scissors\"}\n                    className=\"m-2\"\n                  >\n                    Scissors\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"row\">\n                <div className=\"col-6 text-center\">\n                  <p>{this.state.player}</p>\n                </div>\n                <div className=\"col-6 text-center\">\n                  <p>{this.state.computer}</p>\n                </div>\n                <div className=\"col-12 text-center\">\n                  <p>{this.state.winner} won!</p>\n                </div>\n              </div>\n            )}\n          </div>\n          <button className=\"btn btn-dark m-2\" onClick={this.playGame}>\n            Play again!\n          </button>\n          <div className=\"row\">\n            <div className=\"col-12\">\n              Score\n              <table id=\"scoreboard\" align=\"center\">\n                <tr>\n                  <td> Player </td>\n                  <td width=\"30\"> &nbsp; </td>\n                  <td> Computer </td>\n                  <td width=\"30\"> &nbsp; </td>\n                  <td> Tie </td>\n                </tr>\n                <tr>\n                  <td>{this.state.playerScore}</td>\n                  <td> &nbsp; </td>\n                  <td>{this.state.computerScore}</td>\n                  <td> &nbsp; </td>\n                  <td>{this.state.tie}</td>\n                </tr>\n              </table>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}