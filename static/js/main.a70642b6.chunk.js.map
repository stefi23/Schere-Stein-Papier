{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleChoice","event","preventDefault","player","target","value","countDown","setInterval","setState","counter","state","setTimeout","clearInterval","counterComplete","getScore","winner","computer","getComputerMove","getWinner","console","log","index","Math","floor","random","playGame","resetGame","computerScore","playerScore","tie","element","className","this","onClick","name","aria-label","role","style","background","fontSize","disabled","id","align","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a70642b6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      element: [\"✋\", \"✌️\", \"✊\"],\n      computer: \"\",\n      player: \"\",\n      winner: \"unknown\",\n      computerScore: 0,\n      playerScore: 0,\n      tie: 0,\n      counter: 3,\n      counterComplete: false,\n    };\n  }\n\n  handleChoice = (event) => {\n    event.preventDefault();\n    let player = event.target.value;\n    let countDown = setInterval(() => {\n      this.setState({\n        counter: this.state.counter - 1,\n      });\n    }, 1000);\n\n    setTimeout(() => {\n      clearInterval(countDown);\n      this.setState({\n        counter: 3,\n        counterComplete: true,\n      });\n      this.getScore(winner);\n    }, 3000);\n\n    let computer = this.getComputerMove();\n    let winner = this.getWinner(player, computer);\n    this.setState({\n      player,\n      winner,\n      computer,\n    });\n    console.log(this.state.player);\n  };\n\n  getComputerMove = () => {\n    let index = getRandomInt();\n\n    if (index === 0) return \"✋\";\n    else if (index === 1) return \"✌️\";\n    else return \"✊\";\n\n    function getRandomInt() {\n      let min = 0;\n      let max = 3;\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n  };\n\n  getWinner = (player, computer) => {\n    if (player === computer) {\n      return \"tie\";\n    } else if (player === \"✊\") {\n      if (computer === \"✌️\") {\n        return \"Player\";\n      } else {\n        return \"Computer\";\n      }\n    } else if (player === \"✌️\") {\n      if (computer === \"✋\") {\n        return \"Player\";\n      } else {\n        return \"Computer\";\n      }\n    } else if (player === \"✋\") {\n      if (computer === \"✊\") {\n        return \"Player\";\n      } else {\n        return \"Computer\";\n      }\n    }\n  };\n\n  playGame = () => {\n    this.setState({\n      winner: \"unknown\",\n      counterComplete: false,\n    });\n  };\n\n  resetGame = () => {\n    this.setState({\n      computerScore: 0,\n      playerScore: 0,\n      tie: 0,\n      counterComplete: false,\n    });\n    this.playGame();\n  };\n  //\n\n  getScore = (winner) => {\n    if (winner === \"Player\") {\n      this.setState({\n        playerScore: this.state.playerScore + 1,\n      });\n    } else if (winner === \"Computer\") {\n      this.setState({\n        computerScore: this.state.computerScore + 1,\n      });\n    } else {\n      this.setState({\n        tie: this.state.tie + 1,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App \">\n        <header className=\"App-header\">\n          <div className=\"p-3 box\">\n            <h1>Rock, Paper, Scissors!</h1>\n\n            {this.state.winner === \"unknown\" ? (\n              <div className=\"row\">\n                <div className=\"container \">\n                  <p>Play against the computer. Press any button to start.</p>\n                </div>\n                <div className=\"col-12\">\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"✊\"}\n                    className=\"m-2 buttonGrayRounded\"\n                    aria-label=\"stone\"\n                    role=\"img\"\n                  >\n                    ✊\n                  </button>\n\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"✋\"}\n                    className=\"m-2 buttonGrayRounded\"\n                    aria-label=\"scissors\"\n                    role=\"img\"\n                  >\n                    ✋\n                  </button>\n\n                  <button\n                    onClick={this.handleChoice}\n                    name=\"user\"\n                    value={\"✌️\"}\n                    className=\"m-2 buttonGrayRounded\"\n                    aria-label=\"scissors\"\n                    role=\"img\"\n                  >\n                    ✌️\n                  </button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"row p-3 m-3\">\n                <div className=\"col-4 text-center\">\n                  <p>Player:</p>\n                  <p className=\"m-2\">\n                    <span\n                      // role=\"img\"\n                      // aria-label=\"player choice\"\n                      className=\"buttonBox\"\n                      style={{\n                        background:\n                          this.state.winner === \"Player\" &&\n                          this.state.counterComplete === true\n                            ? \"#8a6a76\"\n                            : this.state.counterComplete === true &&\n                              this.state.winner === \"tie\"\n                            ? \"#49515f\"\n                            : \"#49515f\",\n                      }}\n                    >\n                      {this.state.player}\n                    </span>\n                  </p>\n                </div>\n                <div className=\"col-4 text-center d-flex align-items-center justify-content-center \">\n                  {this.state.counterComplete ? (\n                    <p className=\"mb-0\">\n                      {\" \"}\n                      {this.state.winner === \"tie\"\n                        ? \"You have a tie\"\n                        : this.state.winner + \" won!\"}\n                    </p>\n                  ) : (\n                    <p className=\"mb-0\" style={{ fontSize: \"28px\" }}>\n                      {this.state.counter}\n                    </p>\n                  )}\n                </div>\n                <div className=\"col-4 text-center\">\n                  <p>Computer:</p>\n                  {this.state.counterComplete ? (\n                    <p className=\"m-2 \">\n                      <span\n                        role=\"img\"\n                        aria-label=\"computer choice\"\n                        className=\"buttonBox\"\n                        style={{\n                          background:\n                            this.state.winner === \"Computer\" &&\n                            this.state.counterComplete === true\n                              ? \"#8a6a76\"\n                              : this.state.counterComplete === true &&\n                                this.state.winner === \"tie\"\n                              ? \"#49515f\"\n                              : \"#49515f\",\n                        }}\n                      >\n                        {\" \"}\n                        {this.state.computer}\n                      </span>\n                    </p>\n                  ) : (\n                    <p className=\"m-2\">\n                      <span\n                        className=\"buttonBox\"\n                        role=\"img\"\n                        aria-label=\"question mark\"\n                      >\n                        ❔\n                      </span>\n                    </p>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col-12\">\n              {this.state.winner !== \"unknown\" &&\n              this.state.counterComplete === true ? (\n                <button\n                  className=\"buttonGray m-2 border rounded\"\n                  onClick={this.playGame}\n                >\n                  Play again\n                </button>\n              ) : null}\n\n              <button\n                className=\"buttonGray m-2 border rounded\"\n                onClick={this.resetGame}\n                disabled={\n                  this.state.computerScore === 0 &&\n                  this.state.playerScore === 0 &&\n                  this.state.tie === 0\n                }\n              >\n                Reset Game\n              </button>\n            </div>\n          </div>\n          <div className=\"row mt-4\">\n            <div className=\"col-12\">\n              <table\n                id=\"scoreboard\"\n                align=\"center\"\n                className=\"table table-dark\"\n              >\n                <thead>\n                  <tr>\n                    <td> Player </td>\n                    <td width=\"30\"> &nbsp; </td>\n                    <td> Computer </td>\n                    <td width=\"30\"> &nbsp; </td>\n                    <td> Tie </td>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{this.state.playerScore}</td>\n                    <td> &nbsp; </td>\n                    <td>{this.state.computerScore}</td>\n                    <td> &nbsp; </td>\n                    <td>{this.state.tie}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}